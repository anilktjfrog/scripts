#! /bin/bash

# DISCLAIMER:
# Your use of this code is governed by the following license: JFrog hereby grants you a non-
# exclusive, non-transferable, non-distributable right to use this code solely in connection with
# your use of a JFrog product or service. This code is provided 'as-is' and without any warranties or
# conditions, either express or implied including, without limitation, any warranties or conditions
# of title, non-infringement, merchantability or fitness for a particular cause. Nothing herein shall
# convey to you any right or title in the code, other than for the limited use right set forth
# herein. For the purposes hereof "you" shall mean you as an individual as well as the organization
# on behalf of which you are using the software and the JFrog product or service.

# Function to print usage information
usage() {
  echo "Usage: $0 <SOURCE_ID> <TARGET_ID> \"<REPO_LIST>\""
  echo
  echo "Arguments:"
  echo "  SOURCE_ID    Source Artifactory server ID (as configured in JFrog CLI)"
  echo "  TARGET_ID    Target Artifactory server ID (as configured in JFrog CLI)"
  echo "  REPO_LIST    List of repositories separated by space, enclosed in quotes"
  echo
  echo "Example:"
  echo "  $0 src-server tgt-server \"repo1 repo2 repo3\""
  echo
  exit 1
}

# Check arguments and show usage if missing
if [ $# -ne 3 ]; then
  usage
fi

# Get Arguments
SOURCE_ID="$1"
TARGET_ID="$2"
REPOLIST="$3"

# List of files to skip (generated by JFrog Artifactory)
skippedfiles=("repository.catalog" "maven-metadata.xml"  "Packages.bz2"  ".gemspec.rz" "Packages.gz"  "Release"  ".json"  "Packages"  "by-hash"  "filelists.xml.gz"  "other.xml.gz"  "primary.xml.gz"  "repomd.xml"  "repomd.xml.asc"  "repomd.xml.key")

# Function to compare repositories and log differences
runtask() {
  repo="$1"
  echo "-------------------------------------------------"
  echo "Comparing repository: $repo"
  echo "Fetching file list from source ($SOURCE_ID)..."
  jf rt curl -s -XPOST -H 'Content-Type: text/plain' api/search/aql --server-id "$SOURCE_ID" --data "items.find({\"repo\": \"$repo\"}).include(\"repo\",\"path\",\"name\",\"sha256\")" | jq '.results[]|(.path +"/"+ .name+","+(.sha256|tostring))' | sed  's/\.\///' > a
  echo "Fetching file list from target ($TARGET_ID)..."
  jf rt curl -s -XPOST -H 'Content-Type: text/plain' api/search/aql --server-id "$TARGET_ID" --data "items.find({\"repo\": \"$repo\"}).include(\"repo\",\"path\",\"name\",\"sha256\")" | jq '.results[]|(.path +"/"+ .name+","+(.sha256|tostring))' | sed  's/\.\///' > b

  echo "Comparing file lists..."
  comm -23  <(sort a) <(sort b) | sed -re 's/,[[:alnum:]]+"$/"/g' |sed 's/"//g' > c
  cat -b c >> fulllist.log
  file_path="c"

  # Filter out skipped files and write differences to output
  if [ -e "$file_path" ]; then
    if [ -s "$file_path" ]; then
      echo "Filtering skipped files..."
      while IFS= read -r line; do
        bname=$(echo $line | rev | cut -d"/" -f1 | rev)
        matched=false
        if [[ "$line" =~ ^.npm|^.jfrog|^.pypi|^.composer|^index.yaml$|^versions$|^_uploads$ ]]; then
          matched=true;
        else
          for element in "${skippedfiles[@]}"; do
            if [[ "$element" == "$bname" ]]; then
              matched=true;
            fi
          done
        fi
        if [[ "$matched" == 'false' ]]; then
          echo "$line" >> d
        fi
      done < "$file_path"
      if [ -s "d" ]; then
        echo "Writing differences to $output/$repo.txt"
        echo "-------------------------------------------------" > "$output/$repo.txt"
        echo "Files diff from source - Repo [$repo]" >> "$output/$repo.txt"
        echo "-------------------------------------------------" >> "$output/$repo.txt"
        cat -b d >> "$output/$repo.txt"
      else
        echo "No differences found for $repo after filtering."
      fi
    else
      echo "No differences found for $repo."
    fi
  fi
  rm -f a b c d
  echo "Done comparing $repo."
}

# Main script execution starts here

output="out_$(date +%s)"
rm -f fulllist.log
mkdir -p "$output"
echo "Output directory: $output"
echo "Starting comparison for repositories: $REPOLIST"

# Loop through each repo and run the comparison
for art in $REPOLIST; do
  runtask "$art"
done

echo "Comparison complete. Check the '$output' directory for results."
