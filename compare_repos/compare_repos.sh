#! /bin/bash

# DISCLAIMER:
# Your use of this code is governed by the following license:JFrog hereby grants you a non-
# exclusive, non-transferable, non-distributable right to use this code solely in connection with
# your use of a JFrog product or service. This code is provided 'as-is' and without any warranties or
# conditions, either express or implied including, without limitation, any warranties or conditions
# of title, non-infringement, merchantability or fitness for a particular cause. Nothing herein shall
# convey to you any right or title in the code, other than for the limited use right set forth
# herein. For the purposes hereof "you" shall mean you as an individual as well as the organization
# on behalf of which you are using the software and the JFrog product or service.

#Get Arguments
SOURCE_ID="${1:?[Arg1 missing] Enter source artifactory server ID}"
TARGET_ID="${2:?[Arg2 Missing] ]Enter target artifactory server ID}"

# Below are the list of files that are generated by Jfrog Artifactory. So these will be ignored
skippedfiles=("repository.catalog" "maven-metadata.xml"  "Packages.bz2"  ".gemspec.rz" "Packages.gz"  "Release"  ".json"  "Packages"  "by-hash"  "filelists.xml.gz"  "other.xml.gz"  "primary.xml.gz"  "repomd.xml"  "repomd.xml.asc"  "repomd.xml.key")
runtask() {
mkdir -p "$output/$1"
cd "$output/$1"
jf rt curl -s -XGET "api/storage/$1?list&deep=1" --server-id $SOURCE_ID | jq '.files[]|(.uri +","+(.sha2|tostring))' | sed 's/.//2' > a
jf rt curl -s -XGET "api/storage/$1?list&deep=1" --server-id $TARGET_ID | jq '.files[]|(.uri +","+(.sha2|tostring))' | sed 's/.//2' > b
#jf rt curl -s -XPOST -H 'Content-Type: text/plain' api/search/aql --server-id $SOURCE_ID --data "items.find({\"repo\": \"$1\"}).include(\"repo\",\"path\",\"name\",\"sha256\")" | jq '.results[]|(.path +"/"+ .name+","+(.sha256|tostring))' | sed  's/\.\///' > a
#jf rt curl -s -XPOST -H 'Content-Type: text/plain' api/search/aql --server-id $TARGET_ID --data "items.find({\"repo\": \"$1\"}).include(\"repo\",\"path\",\"name\",\"sha256\")" | jq '.results[]|(.path +"/"+ .name+","+(.sha256|tostring))' | sed  's/\.\///' > b
comm -23  <(sort a) <(sort b) | sed -re 's/,[[:alnum:]]+"$/"/g' |sed 's/"//g' > c
#cat c | xargs -I {} echo "jf rt dl \"$1/{}\" . --server-id local ; jf rt u \"{}\" \"$1/{}\" --server-id local1 ; rm -f \"{}\" "
cat -b c >> fulllist.log
file_path="c"

# Check if the file exists
if [ -e "$file_path" ]; then
    # Check if the file is not empty
    if [ -s "$file_path" ]; then
       while IFS= read -r line; do
         bname=$(echo $line | rev | cut -d"/" -f1 | rev)
         matched=false
         if [[ "$line" =~ ^.npm|^.jfrog|^.pypi|^.composer|^index.yaml$|^versions$|_uploads ]]; then
           matched=true;
         else
           for element in "${skippedfiles[@]}"; do
              if [[ "$element" == $bname ]]; then
                  matched=true;
              fi
          done
         fi
         if [[ "$matched" == 'false' ]]; then
            echo $line >> d
            echo "jf rt dl \"$1/$line\" . --server-id $SOURCE_ID ; jf rt u \"$line\" \"$1/$line\" --server-id $TARGET_ID  ; rm -f \"$line\" " >> "transfer.txt"
         fi
       done < $file_path
       if [ -s "d" ]; then
         echo "-------------------------------------------------" > "$1.txt"
         echo "Files diff from source - Repo [$1]" >> "$1.txt"
         echo "-------------------------------------------------" >> "$1.txt"
         cat -b d >> "$1.txt"
       fi
    fi
fi
rm -f a b c d
}


##Main
#=======
## Refresh the storage info

#jf rt curl -s -XPOST "api/storageinfo/calculate" --server-id $SOURCE_ID
#sleep 120s

output=out_$(date +%s)
# rm -f fulllist.log
N=20
i=1
for art in $(jf rt curl -s -XGET '/api/repositories?type=local' --server-id  $SOURCE_ID | jq -r '.[] | .key');
do
  repocount=$(jf rt curl -s -XGET "api/storageinfo" --server-id $SOURCE_ID | jq '.repositoriesSummaryList[] | select(.repoKey=="'"$art"'") | .filesCount')
    echo "Running Diff for Repo [$art]"
    runtask $art
    ((i=i%N)); ((i++==0)) && wait;
done


### ./compare.sh <source-server-id> <target-server-id>   ---> To get the diff of files between source and target Artifactory
### cat repo-name/transfer.txt | sh ---> To run the transfer commands
### cat repo-name.txt ---> To get the list of files that are not present in target Artifactory
### cat fulllist.log ---> To get the list of all files in source Artifactory
## find ./ -name "transfer.txt" -exec cat {} \; | sh ---> To run the transfer commands for all repos
## find ./ -name "transfer.txt" -exec wc -l {} + \; | sort -n
## find ./ -name "transfer.txt" -exec cat {} \; | wc -l ---> total_file_diff.txt